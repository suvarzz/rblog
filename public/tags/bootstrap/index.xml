<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bootstrap | Mark Goldberg</title>
    <link>/tags/bootstrap/</link>
      <atom:link href="/tags/bootstrap/index.xml" rel="self" type="application/rss+xml" />
    <description>Bootstrap</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2019</copyright><lastBuildDate>Sat, 03 Aug 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/logo.png</url>
      <title>Bootstrap</title>
      <link>/tags/bootstrap/</link>
    </image>
    
    <item>
      <title>Resampling methods</title>
      <link>/post/statistics/resampling_methods/resampling_methods/</link>
      <pubDate>Sat, 03 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/post/statistics/resampling_methods/resampling_methods/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#validation-approach&#34;&gt;Validation approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#leave-one-out-cross-validation-loocv&#34;&gt;Leave-one-out cross-validation (LOOCV)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#k-fold-cross-validation&#34;&gt;k-fold cross validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bootstrapping&#34;&gt;Bootstrapping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bibiography&#34;&gt;Bibiography&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;validation-approach&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Validation approach&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Validation&lt;/strong&gt; (hold-out) approach estimates the prediction error of our predictive models. This involves randomly dividing the available set of observations into two parts, a &lt;strong&gt;training set&lt;/strong&gt; and a &lt;strong&gt;testing set&lt;/strong&gt; (validation set). Our statistical model is fit on the training set, and the fitted model is used to predict the responses for the observations in the validation set. The resulting validation set error rate (typically assessed using &lt;strong&gt;MSE&lt;/strong&gt; in the case of a quantitative response) provides an estimate of the test error rate.&lt;br /&gt;
The drawback of the method is that the &lt;strong&gt;test error rate&lt;/strong&gt; can vary depending on training set.&lt;/p&gt;
&lt;p&gt;Let’s buld &lt;strong&gt;polinomial models&lt;/strong&gt; for first 10 degrees to predict &lt;strong&gt;mpg&lt;/strong&gt; from &lt;strong&gt;horsepower&lt;/strong&gt; dataset (&lt;code&gt;ISLR::Auto&lt;/code&gt;), where &lt;strong&gt;mpg&lt;/strong&gt; - miles per gallon and &lt;strong&gt;horsepower&lt;/strong&gt; - engine horsepower.&lt;br /&gt;
Let’s buld models for train data using &lt;strong&gt;polynomial linear regression&lt;/strong&gt; using vaious polinomial degrees and estimate MSE for each of these models using test data:&lt;br /&gt;
1. &lt;strong&gt;Linear&lt;/strong&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\hat{mpg} = \hat{\beta}_0 + \hat{\beta}_1 \cdot horsepower\)&lt;/span&gt;.&lt;br /&gt;
2. &lt;strong&gt;Squared&lt;/strong&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\hat{mpg} = \hat{\beta}_0 + \hat{\beta}_1 \cdot horsepower + \hat{\beta}_2 \cdot horsepower^2\)&lt;/span&gt;.&lt;br /&gt;
3. &lt;strong&gt;Cubic&lt;/strong&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\hat{mpg} = \hat{\beta}_0 + \hat{\beta}_1 \cdot horsepower + \hat{\beta}_2 \cdot horsepower^2 + \hat{\beta}_3 \cdot horsepower^3\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;#39;ISLR&amp;#39;)        # datasets Auto
attach(Auto)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
# split data into train (0.6) and test (0.4)
inTrain &amp;lt;- sample(nrow(Auto), nrow(Auto)*0.6)
train &amp;lt;- Auto[inTrain, ]
test &amp;lt;- Auto[!inTrain, ]

# Buld polynomial models for first ten degrees
models &amp;lt;- lapply(1:10, function(n) {
  fit.lm &amp;lt;- lm(mpg ~ poly(horsepower, n), data=train)
  })

mse.vec &amp;lt;- sapply(1:10, function(n) {
  mean((mpg[-inTrain] - predict(models[[n]], Auto[-inTrain, ]))^2)
})
# create dataframe to store MSE of our models
mse.df &amp;lt;- data.frame(degree = 1:10, mse = NA)
mse.df$mse &amp;lt;- mse.vec
plot(mse.df, type=&amp;quot;o&amp;quot;, main=&amp;quot;MSE of spline regression models for degrees from 1 to 10&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/statistics/resampling_methods/resampling_methods_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;### PLOT with data and first three polynomial models
par(mar = c(4, 4, 0.5, 1))
plot(horsepower[inTrain], mpg[inTrain],
     xlab = &amp;#39;horsepower&amp;#39;, ylab = &amp;#39;mpg&amp;#39;, pch = 21,
     col = rgb(0, 0, 1, alpha = 0.4), bg = rgb(0, 0, 1, alpha = 0.4))
# add test data
points(horsepower[-inTrain], mpg[-inTrain],
       pch = 21, col = rgb(1, 0, 0, alpha = 0.4), bg = rgb(1, 0, 0, alpha = 0.4))

colors=c(&amp;#39;black&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;)
x1 &amp;lt;- data.frame(horsepower=seq(min(horsepower), max(horsepower), length = 200))
for (i in 1:3) {
    y2 &amp;lt;- predict(models[[i]], newdata=x1)
    lines(x1$horsepower, y2, col=colors[i], lwd=c(2,2,2))
}
legend(&amp;#39;topright&amp;#39;, lty=c(1,1,1),
       col = c(&amp;#39;black&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;red&amp;#39;, rgb(0, 0, 1, alpha = 0.4), bg = rgb(1, 0, 0, alpha = 0.4)),
       legend = c(&amp;#39;Linear model&amp;#39;, &amp;#39;Squared model&amp;#39;, &amp;#39;Cubic model&amp;#39;, &amp;#39;train data&amp;#39;, &amp;#39;test data&amp;#39;),
       lwd=c(2,2,2,NA,NA), pch=c(NA,NA,NA,16,16))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/statistics/resampling_methods/resampling_methods_files/figure-html/unnamed-chunk-2-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# end PLOT&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets calculate MSE for these spline regression with dergees from 1 to 10 for 10 different training data subsets:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;ggplot2&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following object is masked from &amp;#39;Auto&amp;#39;:
## 
##     mpg&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mse.df.2 &amp;lt;- data.frame(sample = vector(&amp;quot;integer&amp;quot;, 100), 
                       degree = vector(&amp;quot;integer&amp;quot;, 100), 
                       mse = vector(&amp;quot;double&amp;quot;, 100))
counter &amp;lt;- 1

for(i in 1:10) {
  # random sample
  set.seed(i)
  sample &amp;lt;- sample(c(TRUE, FALSE), nrow(Auto), replace = T, prob = c(0.6,0.4))
  train &amp;lt;- Auto[sample, ]
  test &amp;lt;- Auto[!sample, ]
  
  # modeling
  for(j in 1:10) {
    lm.fit &amp;lt;- lm(mpg ~ poly(horsepower, j), data = train)
    
    # add degree &amp;amp; mse values
    mse.df.2[counter, 2] &amp;lt;- j
    mse.df.2[counter, 3] &amp;lt;- mean((test$mpg - predict(lm.fit, test))^2)
    
    # add sample identifier
    mse.df.2[counter, 1] &amp;lt;- i
    counter &amp;lt;- counter + 1
  }
  next
}

ggplot(mse.df.2, aes(degree, mse, color = factor(sample))) +
  geom_line(show.legend = FALSE) +
  geom_point(show.legend = FALSE) +
  ylim(c(10, 30))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/statistics/resampling_methods/resampling_methods_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt; All ten curves indicate that there is not much benefit in including cubic or higher-order polynomial terms in the model.&lt;br /&gt;
However, MSE depends on train data subsets.&lt;br /&gt;
The train data contains subset of the observations which can lead to the overestimation of validation set error rate in compair with the test error rate for the model fit on the entire data set.&lt;br /&gt;
&lt;strong&gt;Cross-validation methods&lt;/strong&gt; are used to overcome this drawback.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;leave-one-out-cross-validation-loocv&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Leave-one-out cross-validation (LOOCV)&lt;/h2&gt;
&lt;p&gt;In the LOOCV method a single observation is used for the validation set, and the remaining &lt;span class=&#34;math inline&#34;&gt;\(n - 1\)&lt;/span&gt; observations make up the training set.&lt;br /&gt;
Since the validation observation was not used in the fitting process, the estimate error provides an approximately unbiased estimate for the test error. The validation is repated by subsetting one different observation each time, calculating MSE for this observation each time. The average MSE is calculated in the end. Note: we will use &lt;code&gt;glm&lt;/code&gt; function for linear regression models and the &lt;code&gt;cv.glm&lt;/code&gt; function from &lt;code&gt;boot&lt;/code&gt; package, which provide necessary tools to perform resamping.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# LOOCV
library(&amp;#39;boot&amp;#39;)        # cross-validation
# step 1: fit model
glm.fit &amp;lt;- glm(mpg ~ horsepower, data = Auto)
# setp 2: perform LOOCV across entire data set
loocv.err &amp;lt;- cv.glm(Auto, glm.fit)

str(loocv.err)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 4
##  $ call : language cv.glm(data = Auto, glmfit = glm.fit)
##  $ K    : num 392
##  $ delta: num [1:2] 24.2 24.2
##  $ seed : int [1:626] 403 392 -1703707781 1994959178 434562476 -1277611857 -1105401243 1020654108 526650482 -1538305299 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;call&lt;/strong&gt;: the original function call.&lt;br /&gt;
&lt;strong&gt;K&lt;/strong&gt;: the number of folds used. The LOOCV repeats validation with each of all of 392 observations.&lt;br /&gt;
&lt;strong&gt;delta&lt;/strong&gt;: prediction error (MSE) estimated by the cross-validation.&lt;br /&gt;
&lt;strong&gt;seed&lt;/strong&gt;: the values of the random seed used for the function call&lt;/p&gt;
&lt;p&gt;Let’s compare MSE estimated by &lt;strong&gt;LOOCV&lt;/strong&gt; methods with MSE derived by &lt;strong&gt;simple validation&lt;/strong&gt; approach (0.6/0.4) what we previously used.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;dplyr&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter, lag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     intersect, setdiff, setequal, union&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# get MSE for our 10 polynomial models, where degree is 1 (linear models). 
mse &amp;lt;- mse.df.2 %&amp;gt;% filter(degree == 1) %&amp;gt;% pull(mse)
mse                 # all MSE from our 10 linear polynoms&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 28.43298 26.38322 27.35615 27.40516 20.31488 24.31761 23.14485
##  [8] 21.92717 25.64242 23.90127&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(mse)           # average MSE from our 10 linear polynoms&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 24.88257&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;loocv.err$delta[1]  # LOOCV MSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 24.23151&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see, MSE derived by LOOCV is 24.2 and it is more precise but very close to the average MSE derived by avereging of our 10 polynomial linear models we made before (~24.9).&lt;/p&gt;
&lt;p&gt;Now we can apply LOOCV to estimate MSE for all 10 degrees of our polynomial regression models.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# vector of LOOCV-errors
n &amp;lt;- 10 # max degree of polynom model
cv.err.loocv &amp;lt;- rep(NA, n)
names(cv.err.loocv) &amp;lt;- 1:n
# repeat by powers of polynomes
for (i in 1:n){
  fit.glm &amp;lt;- glm(mpg ~ poly(horsepower, i), data = Auto)
  cv.err.loocv[i] &amp;lt;- cv.glm(Auto, fit.glm)$delta[1]
}
# result
cv.err.loocv&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        1        2        3        4        5        6        7        8 
## 24.23151 19.24821 19.33498 19.42443 19.03321 18.97864 18.83305 18.96115 
##        9       10 
## 19.06863 19.49093&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Result is basically the same for this model as we got before but this result is more precise.&lt;br /&gt;
This LOOCV approach can be used with any kind of predictive modeling.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;k-fold-cross-validation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;k-fold cross validation&lt;/h2&gt;
&lt;p&gt;library(‘GGally’) # matrix diagrams K-times cross-validation is a compromize between sample validation and LOOCV. It is computationally more effective than LOOCV but not so presize.&lt;br /&gt;
We will make 10-time validation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- 10 # max degree (number of polynom models)
cv.err.k.fold &amp;lt;- rep(NA, 10)
names(cv.err.k.fold) &amp;lt;- 1:10
# repeat for power of polynomes
for (i in 1:n){
  fit.glm &amp;lt;- glm(mpg ~ poly(horsepower, i), data = Auto)
  cv.err.k.fold[i] &amp;lt;- cv.glm(Auto, fit.glm, K = 10)$delta[1]
}
# result
cv.err.k.fold&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        1        2        3        4        5        6        7        8 
## 24.10371 19.34487 19.33756 19.71388 18.86019 19.02235 18.90377 19.18771 
##        9       10 
## 19.29985 19.08448&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;k-fold cross validation&lt;/strong&gt; computationally more effective than &lt;strong&gt;LOOCV&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bootstrapping&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bootstrapping&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Bootstrapping&lt;/strong&gt; repeatedly draws independent samples from our data set to create bootstrap data sets. This sample is performed with replacement, which means that the same observation can be sampled more than once.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- nrow(Auto)
statistic &amp;lt;- function(data, index) {
  # extract model coefficients
  coef(lm(mpg ~ horsepower, data = data, subset = index))
}
statistic(Auto, 1:392)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (Intercept)  horsepower 
##  39.9358610  -0.1578447&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
boot(Auto, statistic, 1000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## ORDINARY NONPARAMETRIC BOOTSTRAP
## 
## 
## Call:
## boot(data = Auto, statistic = statistic, R = 1000)
## 
## 
## Bootstrap Statistics :
##       original        bias    std. error
## t1* 39.9358610  0.0269563085 0.859851825
## t2* -0.1578447 -0.0002906457 0.007402954&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bootstrap estimate for SE0 is 0.86, and that the bootstrap estimate for SE1is 0.0076. If we compare these to the standard errors provided by the summary function we see a difference (biased error).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(lm(mpg ~ horsepower, data = Auto))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = mpg ~ horsepower, data = Auto)
## 
## Residuals:
##      Min       1Q   Median       3Q      Max 
## -13.5710  -3.2592  -0.3435   2.7630  16.9240 
## 
## Coefficients:
##              Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) 39.935861   0.717499   55.66   &amp;lt;2e-16 ***
## horsepower  -0.157845   0.006446  -24.49   &amp;lt;2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 4.906 on 390 degrees of freedom
## Multiple R-squared:  0.6059, Adjusted R-squared:  0.6049 
## F-statistic: 599.7 on 1 and 390 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we compair errors for polynomial model (degree=2) by bootstrap and non-bootstrap approach.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;statistic.2 &amp;lt;- function(data, index) {
  coef(lm(mpg ~ poly(horsepower, 2), data = data, subset = index))
}
set.seed(1)
boot(Auto, statistic.2, 1000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## ORDINARY NONPARAMETRIC BOOTSTRAP
## 
## 
## Call:
## boot(data = Auto, statistic = statistic.2, R = 1000)
## 
## 
## Bootstrap Statistics :
##       original      bias    std. error
## t1*   23.44592 0.003943212   0.2255528
## t2* -120.13774 0.117312678   3.7008952
## t3*   44.08953 0.047449584   4.3294215&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(lm(mpg ~ poly(horsepower, 2), data = Auto))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = mpg ~ poly(horsepower, 2), data = Auto)
## 
## Residuals:
##      Min       1Q   Median       3Q      Max 
## -14.7135  -2.5943  -0.0859   2.2868  15.8961 
## 
## Coefficients:
##                       Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)            23.4459     0.2209  106.13   &amp;lt;2e-16 ***
## poly(horsepower, 2)1 -120.1377     4.3739  -27.47   &amp;lt;2e-16 ***
## poly(horsepower, 2)2   44.0895     4.3739   10.08   &amp;lt;2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 4.374 on 389 degrees of freedom
## Multiple R-squared:  0.6876, Adjusted R-squared:  0.686 
## F-statistic:   428 on 2 and 389 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Better correspondence between the bootstrap estimates and the standard estimates suggest a better model fit.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bibiography&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bibiography&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://faculty.marshall.usc.edu/gareth-james/&#34;&gt;An Introduction to Statistical Learning by Gareth James&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://afit-r.github.io&#34;&gt;Air Forse Institute of Technology&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
