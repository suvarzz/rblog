<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Neural Network | Mark Goldberg</title>
    <link>/tags/neural-network/</link>
      <atom:link href="/tags/neural-network/index.xml" rel="self" type="application/rss+xml" />
    <description>Neural Network</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2019</copyright><lastBuildDate>Tue, 06 Aug 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/logo.png</url>
      <title>Neural Network</title>
      <link>/tags/neural-network/</link>
    </image>
    
    <item>
      <title>Neuralnet R</title>
      <link>/post/statistics/neuralnet_r/neuralnet_r/</link>
      <pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/post/statistics/neuralnet_r/neuralnet_r/</guid>
      <description>


&lt;p&gt;Using of &lt;code&gt;neuralnet&lt;/code&gt; R package to tran Neural Network for classification.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(neuralnet)
library(datasets)

# data
df &amp;lt;- datasets::iris
head(df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
## 1          5.1         3.5          1.4         0.2  setosa
## 2          4.9         3.0          1.4         0.2  setosa
## 3          4.7         3.2          1.3         0.2  setosa
## 4          4.6         3.1          1.5         0.2  setosa
## 5          5.0         3.6          1.4         0.2  setosa
## 6          5.4         3.9          1.7         0.4  setosa&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# split data
train.ratio = 0.9
n = nrow(df)

train.id &amp;lt;- sample(n, size = n*train.ratio)
train &amp;lt;- df[train.id,]
test &amp;lt;- df[-train.id,]&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;binary-classification&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Binary classification&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nn &amp;lt;- neuralnet(Species == &amp;quot;setosa&amp;quot; ~ Petal.Length + Petal.Width, train, linear.output = FALSE)
plot(nn)

# Predict for test data
pred &amp;lt;- predict(nn, test)
# Confusion matrix
table(test$Species == &amp;quot;setosa&amp;quot;, pred[, 1] &amp;gt; 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        
##         FALSE TRUE
##   FALSE    10    0
##   TRUE      0    5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;multiclass-classification&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Multiclass classification&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nn &amp;lt;- neuralnet((Species == &amp;quot;setosa&amp;quot;) + (Species == &amp;quot;versicolor&amp;quot;) + (Species == &amp;quot;virginica&amp;quot;)
                ~ Petal.Length + Petal.Width, train, linear.output = FALSE)
plot(nn)
# Predict for test data
pred &amp;lt;- predict(nn, test)
table(test$Species, apply(pred, 1, which.max))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             
##              1 2 3
##   setosa     5 0 0
##   versicolor 0 6 0
##   virginica  0 0 4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;bibliography&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bibliography&lt;/h2&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hopfield Neural Network</title>
      <link>/post/statistics/hopfield_network/hopfield_network/</link>
      <pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/post/statistics/hopfield_network/hopfield_network/</guid>
      <description>


&lt;p&gt;Here is an example of python code.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import numpy as np

# Patterns
x1 = [1, -1, -1, -1, 1, -1, -1, -1, 1]
x2 = [-1, -1, 1, -1, 1, -1, 1, -1, -1]

L = []
L.append(x1)
L.append(x2)

# Function to find weight from list of vectors (lists)
def wts(l):
    # length of the first element in input list
    # Would be great to check that all elements have the same length
    ln = len(l[1])
    # Weight matrix filled with zeros
    W = np.zeros((ln, ln))
    # add x @ x.T for all vectors in input list
    for i in range(len(l)):
        L[i] = np.reshape(np.array(L[i]), (ln, 1))
        W = W + L[i] @ L[i].T
    # fill main diagonal with zeros
    np.fill_diagonal(W, 0)
    return W

W = wts(L)

### TEST
# test vector
t = (-1, -1, 1, -1, 1, -1, -1, 1, -1)

def wvec(vec, W):
    vec = np.reshape(np.array(vec), (len(vec), 1))
    vec = W @ vec
    vec = np.ndarray.round(np.tanh(vec))
    return vec

vec = wvec(t, W)

for i in L:
    if np.array_equal(vec, i):
        print(&amp;quot;Pattern detected&amp;quot;, i)
    else:
        print(&amp;quot;Pattern not detected&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Pattern not detected
## Pattern detected [[-1]
##  [-1]
##  [ 1]
##  [-1]
##  [ 1]
##  [-1]
##  [ 1]
##  [-1]
##  [-1]]&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
