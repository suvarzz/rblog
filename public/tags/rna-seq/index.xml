<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RNA-seq | Mark Goldberg</title>
    <link>/tags/rna-seq/</link>
      <atom:link href="/tags/rna-seq/index.xml" rel="self" type="application/rss+xml" />
    <description>RNA-seq</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2019</copyright><lastBuildDate>Wed, 14 Aug 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/logo.png</url>
      <title>RNA-seq</title>
      <link>/tags/rna-seq/</link>
    </image>
    
    <item>
      <title>Processing of sequencing data in R</title>
      <link>/post/bioinformatics/processing_sequencing_data_in_r/rna_seq_analysis_in_r/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/post/bioinformatics/processing_sequencing_data_in_r/rna_seq_analysis_in_r/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#alignment-using&#34;&gt;Alignment using&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#get-fastq-from-sra-database&#34;&gt;Get fastq from SRA database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;alignment-using&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Alignment using&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Rsubread) # sequence alignment

fastq.files &amp;lt;- list.files(pattern = &amp;quot;.fastq.gz$&amp;quot;, full.names = TRUE)
fastq.files

# build index
buildindex(basename=&amp;quot;mm10&amp;quot;, reference=&amp;quot;mm10.fa&amp;quot;)

# alignment
align(fastq.files, index=&amp;quot;chr1_mm10&amp;quot;)

# parameters
args(align)

# check result
bam.files &amp;lt;- list.files(pattern = &amp;quot;.BAM$&amp;quot;, full.names = TRUE)
bam.files
# properties of BAM files
propmapped(files=bam.files)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;get-fastq-from-sra-database&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Get fastq from SRA database&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(SRAdb) # SRA database
dir.create(&amp;quot;~/SRA&amp;quot;)
setwd(&amp;quot;~/SRA&amp;quot;)

## Create database
sqlfile &amp;lt;-&amp;#39;SRAmetadb.sqlite&amp;#39;
# load database [~3 Gb, 60 Gb on disc!!!]
if(!file.exists(&amp;#39;SRAmetadb.sqlite&amp;#39;)) sqlfile &amp;lt;&amp;lt;- getSRAdbFile()
# connect database
sra_con &amp;lt;- dbConnect(SQLite(), sqlfile)

## get info for SRA from created database
sraInf &amp;lt;- getSRAinfo(&amp;quot;SRP045534&amp;quot;, sra_con, sraType=&amp;quot;sra&amp;quot;)
sraInf

# download SRA
# get SRA using SRA info [~ 5 Gb]
sapply(sraInf$run, function(x) try(getSRAfile(x, sra_con, fileType=&amp;quot;sra&amp;quot;), silent=TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;## extract FASTQ from SRA
cd ~/SRA
for sra in *.sra
  do
    fastq-dump $sra
  done&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>RNA-seq analysis in R</title>
      <link>/post/bioinformatics/rna_seq_in_r/rna_seq_analysis_in_r/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/post/bioinformatics/rna_seq_in_r/rna_seq_analysis_in_r/</guid>
      <description>


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(edgeR)
library(limma)
library(Glimma) 
library(gplots)
library(org.Mm.eg.db)
library(RColorBrewer)

# Preprocessing of expression data
# dataset: https://figshare.com/s/1d788fd384d33e913a2a
setwd(&amp;quot;~/data/&amp;quot;)

# load data
sampleinfo &amp;lt;- read.delim(&amp;quot;SampleInfo.txt&amp;quot;)
seqdata &amp;lt;- read.delim(&amp;quot;GSE60450_Lactation-GenewiseCounts.txt&amp;quot;, stringsAsFactors = FALSE)
head(seqdata)
# format data
# Remove first two columns from seqdata
exp &amp;lt;- seqdata[,-(1:2)]

# Store EntrezGeneID as rownames
rownames(exp) &amp;lt;- seqdata[,1]
head(exp)

# make shorter sample names
colnames(exp) &amp;lt;- substr(colnames(exp), start=1, stop=7)
head(exp)

# Counts per Million (CPM)
myCPM &amp;lt;- edgeR::cpm(exp)
# Have a look at the output
head(myCPM)

# TRUE if CPM &amp;gt; 0.5
thresh &amp;lt;- myCPM &amp;gt; 0.5
# logical matrix
head(thresh)

# How many genes with CPM &amp;gt; 0.5
table(rowSums(thresh))

# keep genes that have at least 2 TRUES in each row of thresh
fltr &amp;lt;- rowSums(thresh) &amp;gt;= 2
# Subset the rows of countdata to keep the more highly expressed genes
exp.fltr &amp;lt;- exp[fltr,]
summary(exp.fltr)
dim(exp.fltr)

# We will look at the first sample
plot(myCPM[,1],countdata[,1])
# Let us limit the x and y-axis so we can actually look to see what is happening at the smaller counts
plot(myCPM[,1],countdata[,1],ylim=c(0,50),xlim=c(0,3))
# Add a vertical line at 0.5 CPM
abline(v=0.5)

### Digital Gene Expression List from edgeR
# Convert counts to DGEList object
dgeObj &amp;lt;- edge::DGEList(exp.fltr)
# have a look at dgeObj
dgeObj
# See what slots are stored in dgeObj
names(dgeObj)
# Library size information is stored in the samples slot
dgeObj$samples

# Library sizes and distribution plot
dgeObj$samples$lib.size


# The names argument tells the barplot to use the sample names on the x-axis
# The las argument rotates the axis names
barplot(dgeObj$samples$lib.size, names=colnames(dgeObj), las=2, main=&amp;quot;Barplot of library sizes&amp;quot;)

# Get log2 counts per million
logcounts &amp;lt;- cpm(dgeObj,log=TRUE)
# Check distributions of samples using boxplots
boxplot(logcounts, xlab=&amp;quot;&amp;quot;, ylab=&amp;quot;Log2 counts per million&amp;quot;, las=2,
        main = &amp;quot;Boxplots of logCPMs (unnormalised)&amp;quot;)
# Let&amp;#39;s add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col=&amp;quot;blue&amp;quot;)

plotMDS(dgeObj)
# We specify the option to let us plot two plots side-by-sde
par(mfrow=c(1,2))
# Let&amp;#39;s set up colour schemes for CellType
# How many cell types and in what order are they stored?
levels(sampleinfo$CellType)
## Let&amp;#39;s choose purple for basal and orange for luminal
col.cell &amp;lt;- c(&amp;quot;purple&amp;quot;,&amp;quot;orange&amp;quot;)[sampleinfo$CellType]
data.frame(sampleinfo$CellType, col.cell)

# Redo the MDS with cell type colouring
plotMDS(dgeObj,col=col.cell)
# Let&amp;#39;s add a legend to the plot so we know which colours correspond to which cell type
legend(&amp;quot;topleft&amp;quot;, fill=c(&amp;quot;purple&amp;quot;,&amp;quot;orange&amp;quot;), legend=levels(sampleinfo$CellType))
# Add a title
title(&amp;quot;Cell type&amp;quot;)

# Similarly for status
levels(sampleinfo$Status)
col.status &amp;lt;- c(&amp;quot;blue&amp;quot;,&amp;quot;red&amp;quot;,&amp;quot;dark green&amp;quot;)[sampleinfo$Status]
col.status
plotMDS(dgeObj, col=col.status)
legend(&amp;quot;topleft&amp;quot;, fill=c(&amp;quot;blue&amp;quot;,&amp;quot;red&amp;quot;,&amp;quot;dark green&amp;quot;),
       legend=levels(sampleinfo$Status), cex=0.8)
title(&amp;quot;Status&amp;quot;)

# There is a sample info corrected file in your data directory
# Old sampleinfo
sampleinfo
# I&amp;#39;m going to write over the sampleinfo object with the corrected sample info
sampleinfo &amp;lt;- read.delim(&amp;quot;data/SampleInfo_Corrected.txt&amp;quot;)
sampleinfo

# Redo the MDSplot with corrected information
par(mfrow=c(1,2))
col.cell &amp;lt;- c(&amp;quot;purple&amp;quot;,&amp;quot;orange&amp;quot;)[sampleinfo$CellType]
col.status &amp;lt;- c(&amp;quot;blue&amp;quot;,&amp;quot;red&amp;quot;,&amp;quot;dark green&amp;quot;)[sampleinfo$Status]


plotMDS(dgeObj,col=col.cell)
legend(&amp;quot;topleft&amp;quot;,fill=c(&amp;quot;purple&amp;quot;,&amp;quot;orange&amp;quot;),
       legend=levels(sampleinfo$CellType))
title(&amp;quot;Cell type&amp;quot;)


plotMDS(dgeObj,col=col.status)
legend(&amp;quot;topleft&amp;quot;,fill=c(&amp;quot;blue&amp;quot;,&amp;quot;red&amp;quot;,&amp;quot;dark green&amp;quot;), 
       legend=levels(sampleinfo$Status), cex=0.8)
title(&amp;quot;Status&amp;quot;)

# Dimension 3 appears to separate pregnant samples from the rest. Dim4?
plotMDS(dgeObj,dim=c(3,4))

labels &amp;lt;- paste(sampleinfo$SampleName, sampleinfo$CellType, sampleinfo$Status)
group &amp;lt;- paste(sampleinfo$CellType,sampleinfo$Status,sep=&amp;quot;.&amp;quot;)
group &amp;lt;- factor(group)
glMDSPlot(dgeObj, labels=labels, groups=group, folder=&amp;quot;mds&amp;quot;)

# Hierarchical clustering with heatmaps

# We estimate the variance for each row in the logcounts matrix
var_genes &amp;lt;- apply(logcounts, 1, var)
head(var_genes)
# Get the gene names for the top 500 most variable genes
select_var &amp;lt;- names(sort(var_genes, decreasing=TRUE))[1:500]
head(select_var)
# Subset logcounts matrix
highly_variable_lcpm &amp;lt;- logcounts[select_var,]
dim(highly_variable_lcpm)
head(highly_variable_lcpm)

## Get some nicer colours
mypalette &amp;lt;- brewer.pal(11,&amp;quot;RdYlBu&amp;quot;)
morecols &amp;lt;- colorRampPalette(mypalette)
# Set up colour vector for celltype variable
col.cell &amp;lt;- c(&amp;quot;purple&amp;quot;,&amp;quot;orange&amp;quot;)[sampleinfo$CellType]

# Plot the heatmap
heatmap.2(highly_variable_lcpm, 
          col=rev(morecols(50)),
          trace=&amp;quot;column&amp;quot;, 
          main=&amp;quot;Top 500 most variable genes across samples&amp;quot;,
          ColSideColors=col.cell,scale=&amp;quot;row&amp;quot;)

# Save the heatmap
png(file=&amp;quot;High_var_genes.heatmap.png&amp;quot;)
heatmap.2(highly_variable_lcpm,col=rev(morecols(50)), trace=&amp;quot;none&amp;quot;,
          main=&amp;quot;Top 500 most variable genes\nacross samples&amp;quot;, 
          ColSideColors=col.cell,scale=&amp;quot;row&amp;quot;)
dev.off()

# Normalization for composition bias
# Apply normalisation to DGEList object
dgeObj &amp;lt;- calcNormFactors(dgeObj)

dgeObj$samples

par(mfrow=c(1,2))
plotMD(logcounts,column = 7)
abline(h=0,col=&amp;quot;grey&amp;quot;)
plotMD(logcounts,column = 11)
abline(h=0,col=&amp;quot;grey&amp;quot;)

par(mfrow=c(1,2))
plotMD(dgeObj,column = 7)
abline(h=0,col=&amp;quot;grey&amp;quot;)

plotMD(dgeObj,column = 11)
abline(h=0,col=&amp;quot;grey&amp;quot;)

save(group,dgeObj,sampleinfo,file=&amp;quot;Robjects/preprocessing.Rdata&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
