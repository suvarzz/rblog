<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bioinformatics | Mark Goldberg</title>
    <link>https://suvar.netlify.com/post/bioinformatics/</link>
      <atom:link href="https://suvar.netlify.com/post/bioinformatics/index.xml" rel="self" type="application/rss+xml" />
    <description>Bioinformatics</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2019</copyright><lastBuildDate>Thu, 07 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://suvar.netlify.com/img/logo.png</url>
      <title>Bioinformatics</title>
      <link>https://suvar.netlify.com/post/bioinformatics/</link>
    </image>
    
    <item>
      <title>Processing of sequencing data in R</title>
      <link>https://suvar.netlify.com/post/bioinformatics/hi-c/hi-c/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
      <guid>https://suvar.netlify.com/post/bioinformatics/hi-c/hi-c/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#using-straw-tool-to-extract-contact-matrix-from-.hic-files&#34;&gt;Using straw tool to extract contact matrix from .hic files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hic-pro-pipeline&#34;&gt;HiC-Pro pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multihic-compare-for-compare-of-2-hi-c-datasets-rao-et-al.2017&#34;&gt;multiHiC compare for compare of 2 Hi-C datasets (Rao et al. 2017)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#joint-normalization-of-hi-c&#34;&gt;Joint normalization of Hi-C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#difference-detection&#34;&gt;Difference detection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Workflow from Stansfield et al., Current Protocols in Bioinformatics, 2019&lt;/p&gt;
&lt;p&gt;Hi-C workflow steps:&lt;br /&gt;
1. mapping reads&lt;br /&gt;
2. assigning fragments&lt;br /&gt;
3. filtering fragments&lt;br /&gt;
4. binning&lt;br /&gt;
5. bin-level filtering&lt;br /&gt;
6. balancing (normalization) of individual matrices&lt;/p&gt;
&lt;p&gt;Paired-end reads of Hi-C experiments are mapped using the single-end mode to map each read (of the pair) independently.&lt;br /&gt;
The theoretical maximum resolution of Hi-C sequencing is set by the restriction enzyme used to cut the DNA. However, most Hi-C datasets are not sequenced deeply enough to reach this theoretical maximum, and typically one of a few fixed-size resolutions are chosen for analyzing the data, including 1 Mb, 100 kb, 50 kb, 40 kb, 20 kb, 10 kb, and 5 kb.&lt;br /&gt;
Two of the more popular pipelines for aligning Hi-C data are &lt;strong&gt;juicer&lt;/strong&gt; (Durand, Shamim, &amp;amp; Aiden, 2016) and &lt;strong&gt;HiC-Pro&lt;/strong&gt; (Servant et al., 2015).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/aidenlab/juicer/wiki&#34;&gt;&lt;strong&gt;juicer&lt;/strong&gt;&lt;/a&gt; takes fastq files and aligns the data into .hic sparse contact maps. Alignment is based on BWA. Contact maps can be extracted from .hic files using juicer or the command line tool &lt;strong&gt;straw&lt;/strong&gt;.&lt;/p&gt;
&lt;div id=&#34;using-straw-tool-to-extract-contact-matrix-from-.hic-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using straw tool to extract contact matrix from .hic files&lt;/h2&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;&amp;lt;NONE/VC/VC_SQRT/KR&amp;gt; &amp;lt;hicFile(s)&amp;gt; &amp;lt;chr1&amp;gt;[:x1:x2] &amp;lt;chr2&amp;gt;[:y1:y2] &amp;lt;BP/FRAG&amp;gt; &amp;lt;binsize&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;VC - vanilla coverage normalization&lt;br /&gt;
VC_SQRT - square root of vanilla coverage normalization&lt;br /&gt;
KR - Knight-Ruiz (KR) normalization&lt;br /&gt;
BP/FRAG - base pare or fragment size. Typically we use BP.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;mkdir ~/GEO
cd ~/GEO
# download .hic file [9 Gb]
wget ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE63nnn/GSE63525/suppl/GSE63525_K562_combined_30.hic
# extract raw matrix for 22 chromosome at 500-kb resolution
straw NONE GSE63525_K562_combined_30.hic 22 22 BP 500000 &amp;gt; K562.chHCT116_r22.500 kb.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;txt file is in the sparse upper-triangular matrix format, containing 3 columns:&lt;br /&gt;
1. start of interaction&lt;br /&gt;
2. end of interaction&lt;br /&gt;
3. frequency (IF)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;hic-pro-pipeline&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;HiC-Pro pipeline&lt;/h2&gt;
&lt;p&gt;Output 2 files (.matrix and .bed):&lt;br /&gt;
* The .matrix is plain-text 3-column sparse upper-triangular matrix with the columns &lt;span class=&#34;math inline&#34;&gt;\(bin_i\)&lt;/span&gt; &lt;span class=&#34;math inline&#34;&gt;\(bin_j\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(counts_ij\)&lt;/span&gt;.&lt;br /&gt;
* The .bed file contains the genomic coordinates for each &lt;span class=&#34;math inline&#34;&gt;\(bin_i\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(bin_j\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sparse2full&lt;/code&gt; - convert sparse upper-triangular matrix to full contact matrix.&lt;br /&gt;
&lt;code&gt;hicpro2bedpe&lt;/code&gt; - convert alignments by HiC-Pro into BEDPE format.&lt;br /&gt;
&lt;code&gt;hicpro2bedpe&lt;/code&gt; - input .matrix and .bed and convert into sparse upper-triangular matrix.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;multihic-compare-for-compare-of-2-hi-c-datasets-rao-et-al.2017&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;multiHiC compare for compare of 2 Hi-C datasets (Rao et al. 2017)&lt;/h2&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;mkdir ~/GEO
cd ~/GEO
# download .hic files from
wget ftp://ftp.ncbi.nlm.nih.gov/geo/samples/GSM2795nnn/GSM2795535/suppl/GSM2795535_Rao-2017-HIC001_30.hic
wget ftp://ftp.ncbi.nlm.nih.gov/geo/samples/GSM2795nnn/GSM2795536/suppl/GSM2795536_Rao-2017-HIC002_30.hic
wget ftp://ftp.ncbi.nlm.nih.gov/geo/samples/GSM2809nnn/GSM2809539/suppl/GSM2809539_Rao-2017-HIC008_30.hic
wget ftp://ftp.ncbi.nlm.nih.gov/geo/samples/GSM2809nnn/GSM2809540/suppl/GSM2809540_Rao-2017-HIC009_30.hic

# convert .hic to sparse contact matrix for each of 22 chromosomes
for i in {1,2,8,9}
   do
     mkdir HIC00${i}
     for j in {1..22}
       do
         straw NONE *_Rao-2017-HIC00${i}_30.hic $j $j BP 100000 &amp;gt; HIC00${i}/HIC00${i}.NONE.chr${j}.100000.txt
       done
   done&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readr)
library(data.table)
library(dplyr)
library(edgeR)
library(BiocParallel)
library(HiCcompare)
library(multiHiCcompare)


options(scipen = 10) # output fixed numbers

# Set up parameters for reading in data
chr &amp;lt;- paste0(&amp;#39;chr&amp;#39;, c(1:22))     # Chromosome names
samples &amp;lt;- paste0(&amp;#39;HIC00&amp;#39;, c(1,2,8,9)) # Sample names
res &amp;lt;- 100000                          # Data resolution

# Read data
sample_list &amp;lt;- list()
chr_list &amp;lt;- list()
wd &amp;lt;- &amp;#39;/home/suvar/GEO/&amp;#39;
for(j in 1:length(samples)) {
  for (i in 1:length(chr)) {
    chr_list[[i]] &amp;lt;- read_tsv(paste0(wd, samples[j], &amp;#39;/&amp;#39;,
    samples[j], &amp;#39;.NONE.&amp;#39;, chr[i], &amp;#39;.&amp;#39;, res, &amp;#39;.txt&amp;#39;),
    col_names = FALSE) %&amp;gt;% as.data.table()
    # Add column indicating the chromosome
    chr_list[[i]] &amp;lt;- cbind(i, chr_list[[i]])
    colnames(chr_list[[i]]) &amp;lt;- c(&amp;#39;chr&amp;#39;, &amp;#39;region1&amp;#39;, &amp;#39;region2&amp;#39;, &amp;#39;IF&amp;#39;)
  }
  sample_list[[j]] &amp;lt;- chr_list
  chr_list &amp;lt;- list()
}

# Collapse separate chromosome lists into one table per sample
sample_list &amp;lt;- lapply(sample_list, rbindlist)
  
sample_list[[1]]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;joint-normalization-of-hi-c&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Joint normalization of Hi-C&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(pander)
# Create a Hicexp object for use by multiHiCcompare (~10 min)
# Four objects are assigned into two groups
rao2017 &amp;lt;- make_hicexp(data_list = sample_list, groups = c(1,1,2,2))
rao2017 # class(rao2017)

# view the IF information
hic_table(rao2017)

# MD plots before normalization
MD_hicexp(rao2017, plot.chr = 1, plot.loess = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Normalize (~2 min)
rao2017 &amp;lt;- fastlo(rao2017) # cyclic loesss normalisation is also available

# Plot normalization results
MD_hicexp(rao2017, plot.chr = 1, plot.loess = TRUE)

# Print normalized IFs
pander::pandoc.table(head(hic_table(rao2017)))

library(BiocParallel)
# Check how many cores are available
numCores &amp;lt;- parallel::detectCores()
# Set the number of cores at least one less than the total number

if(Sys.info()[&amp;#39;sysname&amp;#39;] == &amp;#39;Windows&amp;#39;) {
  # Windows settings
  register(SnowParam(workers = numCores-1),
  default = TRUE)
  }else {
  # Unix settings
  register(MulticoreParam(workers = numCores-1),
  default = TRUE)
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;difference-detection&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Difference detection&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Perform exact test (~10 min)
# May use &amp;quot;parallel = TRUE&amp;quot; option to speed up computations
rao2017 &amp;lt;- hic_exactTest(rao2017, parallel = TRUE)
# Plot a composite MD plot with the results of a comparison
MD_composite(rao2017,plot.chr = 1)
# Print results as a data frame
pander::pandoc.table(head(results(rao2017)))

# Save the Hicexp object
save(rao2017, file = paste0(wd,&amp;#39;rao2017.RDA&amp;#39;))
# To start the downstream analysis
# without re-running multiHiCcompare load the saved file
# load(paste0(wd,&amp;#39;rao2017.RDA&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Genome Wide Associated Studies (GWAS)</title>
      <link>https://suvar.netlify.com/post/bioinformatics/gwas/gwas/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://suvar.netlify.com/post/bioinformatics/gwas/gwas/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#snp-analysis-using-snpasoc-r-package&#34;&gt;SNP analysis using SNPasoc R package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gwas-using-plink&#34;&gt;GWAS using PLINK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;snp-analysis-using-snpasoc-r-package&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;SNP analysis using SNPasoc R package&lt;/h1&gt;
&lt;p&gt;Example demonstrate an association test for an illness for one single SNP.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;SNPassoc&amp;quot;)
library(&amp;quot;SNPassoc&amp;quot;)
data(SNPs)
head(SNPs)
head(SNPs.info.pos)

# select 6-40 SNP and create SNP object
mySNP &amp;lt;- setupSNP(SNPs, 6:40, sep=&amp;quot;&amp;quot;)

# casco - 1 for case, 0 for control)
mySNP

# association test
res &amp;lt;- association(casco~sex+snp10001+blood.pre, data = mySNP,
                     model.interaction = c(&amp;quot;dominant&amp;quot;,&amp;quot;codominant&amp;quot;))
res&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;0 - control sample size&lt;br /&gt;
% - percent for each variant&lt;br /&gt;
1 - case sample size&lt;br /&gt;
% - percent for each varian&lt;br /&gt;
OR - odd ratio&lt;br /&gt;
lower/upper - 95% confidence interval for odd ratio&lt;br /&gt;
p-value of likelihood ratio test&lt;br /&gt;
AIC - Akaike Information Criterion&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# association scan for SNPs - separately for all models
res &amp;lt;- WGassociation(protein, data = mySNP, model = &amp;#39;all&amp;#39;) # same formula as protein~1,
# p-values for dominant model
dominant(res)
# p-values for recessive model
recessive(res)
# complete statistics
WGstats(res)
summary(res)

# Plot p-values for all models
plot(res)

# whole genome association - one log model
resHapMap &amp;lt;- WGassociation(protein, data= mySNP, model=&amp;#39;log&amp;#39;)
plot(resHapMap)

Another examplw for all genome association
# two population groups (CEU and YRI), 60 samples for each group
data(HapMap)
str(HapMap)
str(HapMap.SNPs.pos)
# SNP class object
myHapMap &amp;lt;- setupSNP(HapMap, colSNPs=3:9307, sort=TRUE, info=HapMap.SNPs.pos, sep=&amp;quot;&amp;quot;)

# association for dominant model
myHapMapres &amp;lt;- WGassociation(group, data= myHapMap, model=&amp;quot;dominant&amp;quot;)

head(myHapMapres)
print(myHapMapres)
# plot association for all chromosomes

plot(myHapMapres, whole=TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;gwas-using-plink&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;GWAS using PLINK&lt;/h1&gt;
&lt;p&gt;The PLINK format of the GWAS data consists of two separate files, one containing the &lt;em&gt;SNP information&lt;/em&gt; (.ped)and the other containing the &lt;em&gt;mapping information&lt;/em&gt; (.map). For dependence analysis, it can be combined with the phenotype data separately.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Processing of sequencing data in R</title>
      <link>https://suvar.netlify.com/post/bioinformatics/processing_sequencing_data_in_r/rna_seq_analysis_in_r/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://suvar.netlify.com/post/bioinformatics/processing_sequencing_data_in_r/rna_seq_analysis_in_r/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#alignment-using&#34;&gt;Alignment using&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#get-fastq-from-sra-database&#34;&gt;Get fastq from SRA database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;alignment-using&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Alignment using&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Rsubread) # sequence alignment

fastq.files &amp;lt;- list.files(pattern = &amp;quot;.fastq.gz$&amp;quot;, full.names = TRUE)
fastq.files

# build index
buildindex(basename=&amp;quot;mm10&amp;quot;, reference=&amp;quot;mm10.fa&amp;quot;)

# alignment
align(fastq.files, index=&amp;quot;chr1_mm10&amp;quot;)

# parameters
args(align)

# check result
bam.files &amp;lt;- list.files(pattern = &amp;quot;.BAM$&amp;quot;, full.names = TRUE)
bam.files
# properties of BAM files
propmapped(files=bam.files)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;get-fastq-from-sra-database&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Get fastq from SRA database&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(SRAdb) # SRA database
dir.create(&amp;quot;~/SRA&amp;quot;)
setwd(&amp;quot;~/SRA&amp;quot;)

## Create database
sqlfile &amp;lt;-&amp;#39;SRAmetadb.sqlite&amp;#39;
# load database [~3 Gb, 60 Gb on disc!!!]
if(!file.exists(&amp;#39;SRAmetadb.sqlite&amp;#39;)) sqlfile &amp;lt;&amp;lt;- getSRAdbFile()
# connect database
sra_con &amp;lt;- dbConnect(SQLite(), sqlfile)

## get info for SRA from created database
sraInf &amp;lt;- getSRAinfo(&amp;quot;SRP045534&amp;quot;, sra_con, sraType=&amp;quot;sra&amp;quot;)
sraInf

# download SRA
# get SRA using SRA info [~ 5 Gb]
sapply(sraInf$run, function(x) try(getSRAfile(x, sra_con, fileType=&amp;quot;sra&amp;quot;), silent=TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;## extract FASTQ from SRA
cd ~/SRA
for sra in *.sra
  do
    fastq-dump $sra
  done&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>RNA-seq analysis in R</title>
      <link>https://suvar.netlify.com/post/bioinformatics/rna_seq_in_r/rna_seq_analysis_in_r/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://suvar.netlify.com/post/bioinformatics/rna_seq_in_r/rna_seq_analysis_in_r/</guid>
      <description>


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(edgeR)
library(limma)
library(Glimma) 
library(gplots)
library(org.Mm.eg.db)
library(RColorBrewer)

# Preprocessing of expression data
# dataset: https://figshare.com/s/1d788fd384d33e913a2a
setwd(&amp;quot;~/data/&amp;quot;)

# load data
sampleinfo &amp;lt;- read.delim(&amp;quot;SampleInfo.txt&amp;quot;)
seqdata &amp;lt;- read.delim(&amp;quot;GSE60450_Lactation-GenewiseCounts.txt&amp;quot;, stringsAsFactors = FALSE)
head(seqdata)
# format data
# Remove first two columns from seqdata
exp &amp;lt;- seqdata[,-(1:2)]

# Store EntrezGeneID as rownames
rownames(exp) &amp;lt;- seqdata[,1]
head(exp)

# make shorter sample names
colnames(exp) &amp;lt;- substr(colnames(exp), start=1, stop=7)
head(exp)

# Counts per Million (CPM)
myCPM &amp;lt;- edgeR::cpm(exp)
# Have a look at the output
head(myCPM)

# TRUE if CPM &amp;gt; 0.5
thresh &amp;lt;- myCPM &amp;gt; 0.5
# logical matrix
head(thresh)

# How many genes with CPM &amp;gt; 0.5
table(rowSums(thresh))

# keep genes that have at least 2 TRUES in each row of thresh
fltr &amp;lt;- rowSums(thresh) &amp;gt;= 2
# Subset the rows of countdata to keep the more highly expressed genes
exp.fltr &amp;lt;- exp[fltr,]
summary(exp.fltr)
dim(exp.fltr)

# We will look at the first sample
plot(myCPM[,1],countdata[,1])
# Let us limit the x and y-axis so we can actually look to see what is happening at the smaller counts
plot(myCPM[,1],countdata[,1],ylim=c(0,50),xlim=c(0,3))
# Add a vertical line at 0.5 CPM
abline(v=0.5)

### Digital Gene Expression List from edgeR
# Convert counts to DGEList object
dgeObj &amp;lt;- edge::DGEList(exp.fltr)
# have a look at dgeObj
dgeObj
# See what slots are stored in dgeObj
names(dgeObj)
# Library size information is stored in the samples slot
dgeObj$samples

# Library sizes and distribution plot
dgeObj$samples$lib.size


# The names argument tells the barplot to use the sample names on the x-axis
# The las argument rotates the axis names
barplot(dgeObj$samples$lib.size, names=colnames(dgeObj), las=2, main=&amp;quot;Barplot of library sizes&amp;quot;)

# Get log2 counts per million
logcounts &amp;lt;- cpm(dgeObj,log=TRUE)
# Check distributions of samples using boxplots
boxplot(logcounts, xlab=&amp;quot;&amp;quot;, ylab=&amp;quot;Log2 counts per million&amp;quot;, las=2,
        main = &amp;quot;Boxplots of logCPMs (unnormalised)&amp;quot;)
# Let&amp;#39;s add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col=&amp;quot;blue&amp;quot;)

plotMDS(dgeObj)
# We specify the option to let us plot two plots side-by-sde
par(mfrow=c(1,2))
# Let&amp;#39;s set up colour schemes for CellType
# How many cell types and in what order are they stored?
levels(sampleinfo$CellType)
## Let&amp;#39;s choose purple for basal and orange for luminal
col.cell &amp;lt;- c(&amp;quot;purple&amp;quot;,&amp;quot;orange&amp;quot;)[sampleinfo$CellType]
data.frame(sampleinfo$CellType, col.cell)

# Redo the MDS with cell type colouring
plotMDS(dgeObj,col=col.cell)
# Let&amp;#39;s add a legend to the plot so we know which colours correspond to which cell type
legend(&amp;quot;topleft&amp;quot;, fill=c(&amp;quot;purple&amp;quot;,&amp;quot;orange&amp;quot;), legend=levels(sampleinfo$CellType))
# Add a title
title(&amp;quot;Cell type&amp;quot;)

# Similarly for status
levels(sampleinfo$Status)
col.status &amp;lt;- c(&amp;quot;blue&amp;quot;,&amp;quot;red&amp;quot;,&amp;quot;dark green&amp;quot;)[sampleinfo$Status]
col.status
plotMDS(dgeObj, col=col.status)
legend(&amp;quot;topleft&amp;quot;, fill=c(&amp;quot;blue&amp;quot;,&amp;quot;red&amp;quot;,&amp;quot;dark green&amp;quot;),
       legend=levels(sampleinfo$Status), cex=0.8)
title(&amp;quot;Status&amp;quot;)

# There is a sample info corrected file in your data directory
# Old sampleinfo
sampleinfo
# I&amp;#39;m going to write over the sampleinfo object with the corrected sample info
sampleinfo &amp;lt;- read.delim(&amp;quot;data/SampleInfo_Corrected.txt&amp;quot;)
sampleinfo

# Redo the MDSplot with corrected information
par(mfrow=c(1,2))
col.cell &amp;lt;- c(&amp;quot;purple&amp;quot;,&amp;quot;orange&amp;quot;)[sampleinfo$CellType]
col.status &amp;lt;- c(&amp;quot;blue&amp;quot;,&amp;quot;red&amp;quot;,&amp;quot;dark green&amp;quot;)[sampleinfo$Status]


plotMDS(dgeObj,col=col.cell)
legend(&amp;quot;topleft&amp;quot;,fill=c(&amp;quot;purple&amp;quot;,&amp;quot;orange&amp;quot;),
       legend=levels(sampleinfo$CellType))
title(&amp;quot;Cell type&amp;quot;)


plotMDS(dgeObj,col=col.status)
legend(&amp;quot;topleft&amp;quot;,fill=c(&amp;quot;blue&amp;quot;,&amp;quot;red&amp;quot;,&amp;quot;dark green&amp;quot;), 
       legend=levels(sampleinfo$Status), cex=0.8)
title(&amp;quot;Status&amp;quot;)

# Dimension 3 appears to separate pregnant samples from the rest. Dim4?
plotMDS(dgeObj,dim=c(3,4))

labels &amp;lt;- paste(sampleinfo$SampleName, sampleinfo$CellType, sampleinfo$Status)
group &amp;lt;- paste(sampleinfo$CellType,sampleinfo$Status,sep=&amp;quot;.&amp;quot;)
group &amp;lt;- factor(group)
glMDSPlot(dgeObj, labels=labels, groups=group, folder=&amp;quot;mds&amp;quot;)

# Hierarchical clustering with heatmaps

# We estimate the variance for each row in the logcounts matrix
var_genes &amp;lt;- apply(logcounts, 1, var)
head(var_genes)
# Get the gene names for the top 500 most variable genes
select_var &amp;lt;- names(sort(var_genes, decreasing=TRUE))[1:500]
head(select_var)
# Subset logcounts matrix
highly_variable_lcpm &amp;lt;- logcounts[select_var,]
dim(highly_variable_lcpm)
head(highly_variable_lcpm)

## Get some nicer colours
mypalette &amp;lt;- brewer.pal(11,&amp;quot;RdYlBu&amp;quot;)
morecols &amp;lt;- colorRampPalette(mypalette)
# Set up colour vector for celltype variable
col.cell &amp;lt;- c(&amp;quot;purple&amp;quot;,&amp;quot;orange&amp;quot;)[sampleinfo$CellType]

# Plot the heatmap
heatmap.2(highly_variable_lcpm, 
          col=rev(morecols(50)),
          trace=&amp;quot;column&amp;quot;, 
          main=&amp;quot;Top 500 most variable genes across samples&amp;quot;,
          ColSideColors=col.cell,scale=&amp;quot;row&amp;quot;)

# Save the heatmap
png(file=&amp;quot;High_var_genes.heatmap.png&amp;quot;)
heatmap.2(highly_variable_lcpm,col=rev(morecols(50)), trace=&amp;quot;none&amp;quot;,
          main=&amp;quot;Top 500 most variable genes\nacross samples&amp;quot;, 
          ColSideColors=col.cell,scale=&amp;quot;row&amp;quot;)
dev.off()

# Normalization for composition bias
# Apply normalisation to DGEList object
dgeObj &amp;lt;- calcNormFactors(dgeObj)

dgeObj$samples

par(mfrow=c(1,2))
plotMD(logcounts,column = 7)
abline(h=0,col=&amp;quot;grey&amp;quot;)
plotMD(logcounts,column = 11)
abline(h=0,col=&amp;quot;grey&amp;quot;)

par(mfrow=c(1,2))
plotMD(dgeObj,column = 7)
abline(h=0,col=&amp;quot;grey&amp;quot;)

plotMD(dgeObj,column = 11)
abline(h=0,col=&amp;quot;grey&amp;quot;)

save(group,dgeObj,sampleinfo,file=&amp;quot;Robjects/preprocessing.Rdata&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Differential expression analysis</title>
      <link>https://suvar.netlify.com/post/bioinformatics/differential_expression_analysis/diferential_expression_analysis/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://suvar.netlify.com/post/bioinformatics/differential_expression_analysis/diferential_expression_analysis/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#gene-expression-analysis-of-histone-deacetylase-1-hdac1-knockout-mouse.&#34;&gt;Gene expression analysis of histone deacetylase 1 (HDAC1) knockout mouse.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sources&#34;&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;gene-expression-analysis-of-histone-deacetylase-1-hdac1-knockout-mouse.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Gene expression analysis of histone deacetylase 1 (HDAC1) knockout mouse.&lt;/h2&gt;
&lt;p&gt;This short tutorial should help to understand the basic principal of gene expression analysis using simple dataset and nearly basic R.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Affymetrix microarray&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Dataset&lt;/em&gt;: &lt;a href=&#34;http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE5583&#34;&gt;GSE5583&lt;/a&gt;&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Paper&lt;/em&gt;: Mol Cell Biol 2006 Nov;26(21):7913-28. &lt;a href=&#34;http://www.ncbi.nlm.nih.gov/pubmed/16940178&#34;&gt;PMID: 16940178&lt;/a&gt;&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;R code&lt;/em&gt;: Ahmed Moustafa&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Read the data into R
library (RCurl)
url = getURL (&amp;quot;http://bit.ly/GSE5583_data&amp;quot;, followlocation = TRUE)
data = as.matrix(read.table (text = url, row.names = 1, header = T))

# Check the loaded dataset
dim(data) # Dimension of the dataset&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 12488     6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# data shows gene experssion levels in 6 samples:
# rows correspond to samples (3 wild type WT and 3 knock-out KO)
# columns correspond to genes ids
head(data) # First few rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           WT.GSM130365 WT.GSM130366 WT.GSM130367 KO.GSM130368 KO.GSM130369
## 100001_at         11.5          5.6         69.1         15.7         36.0
## 100002_at         20.5         32.4         93.3         31.8         14.4
## 100003_at         72.4         89.0         79.2         80.5        130.1
## 100004_at        261.0        226.2        365.1        432.0        447.3
## 100005_at       1086.2       1555.6       1487.1       1062.2       1365.9
## 100006_at         49.7         52.9         15.0         25.8         48.8
##           KO.GSM130370
## 100001_at         42.0
## 100002_at         22.9
## 100003_at         86.7
## 100004_at        288.1
## 100005_at       1436.2
## 100006_at         54.8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;###################
# Exploratory plots
###################

# Check the behavior of the data
hist(data, col = &amp;quot;gray&amp;quot;, main=&amp;quot;GSE5583 - Histogram&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://suvar.netlify.com/post/bioinformatics/differential_expression_analysis/diferential_expression_analysis_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Log2 transformation (why?)
data2 = log2(data)

# Check the behavior of the data after log-transformation
hist(data2, col = &amp;quot;gray&amp;quot;, main=&amp;quot;GSE5583 (log2) - Histogram&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://suvar.netlify.com/post/bioinformatics/differential_expression_analysis/diferential_expression_analysis_files/figure-html/unnamed-chunk-1-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Boxplot
boxplot(data2, col=c(&amp;quot;darkgreen&amp;quot;, &amp;quot;darkgreen&amp;quot;, &amp;quot;darkgreen&amp;quot;,
                     &amp;quot;darkred&amp;quot;, &amp;quot;darkred&amp;quot;, &amp;quot;darkred&amp;quot;),
        main=&amp;quot;GSE5583 - boxplots&amp;quot;, las=2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://suvar.netlify.com/post/bioinformatics/differential_expression_analysis/diferential_expression_analysis_files/figure-html/unnamed-chunk-1-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Hierarchical clustering of the &amp;quot;samples&amp;quot; based on
# the correlation coefficients of the expression values
hc = hclust(as.dist(1-cor(data2)))
plot(hc, main=&amp;quot;GSE5583 - Hierarchical Clustering&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://suvar.netlify.com/post/bioinformatics/differential_expression_analysis/diferential_expression_analysis_files/figure-html/unnamed-chunk-1-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#######################################
# Differential expression (DE) analysis
#######################################

# Separate the two conditions into two smaller data frames
wt = data2[,1:3]
ko = data2[,4:6]

# Compute the means of the samples of each condition
wt.mean = apply(wt, 1, mean)
ko.mean = apply(ko, 1, mean)

head(wt.mean)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 100001_at 100002_at 100003_at 100004_at 100005_at 100006_at 
##  4.039868  5.306426  6.320360  8.120503 10.408872  5.089087&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(ko.mean)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 100001_at 100002_at 100003_at 100004_at 100005_at 100006_at 
##  4.844978  4.452076  6.597451  8.576804 10.318839  5.358071&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Just get the maximum of all the means
limit = max(wt.mean, ko.mean)

# Scatter plot
plot(ko.mean ~ wt.mean, xlab = &amp;quot;WT&amp;quot;, ylab = &amp;quot;KO&amp;quot;,
     main = &amp;quot;GSE5583 - Scatter&amp;quot;, xlim = c(0, limit), ylim = c(0, limit))
# Diagonal line
abline(0, 1, col = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://suvar.netlify.com/post/bioinformatics/differential_expression_analysis/diferential_expression_analysis_files/figure-html/unnamed-chunk-1-5.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute fold-change (biological significance)
# Difference between the means of the conditions
fold = wt.mean - ko.mean

# Histogram of the fold differences
hist(fold, col = &amp;quot;gray&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://suvar.netlify.com/post/bioinformatics/differential_expression_analysis/diferential_expression_analysis_files/figure-html/unnamed-chunk-1-6.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute statistical significance (using t-test)
pvalue = NULL # Empty list for the p-values
tstat = NULL # Empty list of the t test statistics

for(i in 1 : nrow(data)) { # For each gene : 
  x = wt[i,] # WT of gene number i
  y = ko[i,] # KO of gene number i
  
  # Compute t-test between the two conditions
  t = t.test(x, y)
  
  # Put the current p-value in the pvalues list
  pvalue[i] = t$p.value
  # Put the current t-statistic in the tstats list
  tstat[i] = t$statistic
}

head(pvalue)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.5449730 0.3253745 0.3287830 0.1892376 0.6928410 0.7180077&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Histogram of p-values (-log10)
hist(-log10(pvalue), col = &amp;quot;gray&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://suvar.netlify.com/post/bioinformatics/differential_expression_analysis/diferential_expression_analysis_files/figure-html/unnamed-chunk-1-7.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Volcano: put the biological significance (fold-change)
# and statistical significance (p-value) in one plot
plot(fold, -log10(pvalue), main = &amp;quot;GSE5583 - Volcano&amp;quot;)

fold_cutoff = 2
pvalue_cutoff = 0.01
abline(v = fold_cutoff, col = &amp;quot;blue&amp;quot;, lwd = 3)
abline(v = -fold_cutoff, col = &amp;quot;red&amp;quot;, lwd = 3)
abline(h = -log10(pvalue_cutoff), col = &amp;quot;green&amp;quot;, lwd = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://suvar.netlify.com/post/bioinformatics/differential_expression_analysis/diferential_expression_analysis_files/figure-html/unnamed-chunk-1-8.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Screen for the genes that satisfy the filtering criteria

# Fold-change filter for &amp;quot;biological&amp;quot; significance
filter_by_fold = abs(fold) &amp;gt;= fold_cutoff
dim(data2[filter_by_fold, ])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 210   6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# P-value filter for &amp;quot;statistical&amp;quot; significance
filter_by_pvalue = pvalue &amp;lt;= pvalue_cutoff
dim(data2[filter_by_pvalue, ])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 429   6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Combined filter (both biological and statistical)
filter_combined = filter_by_fold &amp;amp; filter_by_pvalue

filtered = data2[filter_combined,]
dim(filtered)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 42  6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(filtered)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             WT.GSM130365 WT.GSM130366 WT.GSM130367 KO.GSM130368
## 100716_at       4.852998     4.906891     5.626439     7.572890
## 100914_at      10.340852     9.917074    10.250062    12.248787
## 101368_at       9.937227    10.204693    10.385215    12.270354
## 101550_at       5.526695     5.439623     6.221104     2.137504
## 101635_f_at     7.105385     6.722466     6.943687     5.266787
## 101883_s_at     5.768184     6.127221     5.133399    11.564292
##             KO.GSM130369 KO.GSM130370
## 100716_at       7.791163     7.299208
## 100914_at      12.185526    12.127124
## 101368_at      12.213499    12.078184
## 101550_at       2.906891     2.035624
## 101635_f_at     4.842979     4.643856
## 101883_s_at    11.679568    11.663514&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Let&amp;#39;s generate the volcano plot again,
# highlighting the significantly differential expressed genes
plot(fold, -log10(pvalue), main = &amp;quot;GSE5583 - Volcano #2&amp;quot;)
points (fold[filter_combined], -log10(pvalue[filter_combined]),
        pch = 16, col = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://suvar.netlify.com/post/bioinformatics/differential_expression_analysis/diferential_expression_analysis_files/figure-html/unnamed-chunk-1-9.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Highlighting up-regulated in red and down-regulated in blue
plot(fold, -log10(pvalue), main = &amp;quot;GSE5583 - Volcano #3&amp;quot;)
points (fold[filter_combined &amp;amp; fold &amp;lt; 0],
        -log10(pvalue[filter_combined &amp;amp; fold &amp;lt; 0]),
        pch = 16, col = &amp;quot;red&amp;quot;)
points (fold[filter_combined &amp;amp; fold &amp;gt; 0],
        -log10(pvalue[filter_combined &amp;amp; fold &amp;gt; 0]),
        pch = 16, col = &amp;quot;blue&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://suvar.netlify.com/post/bioinformatics/differential_expression_analysis/diferential_expression_analysis_files/figure-html/unnamed-chunk-1-10.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Cluster the rows (genes) &amp;amp; columns (samples) by correlation
rowv = as.dendrogram(hclust(as.dist(1-cor(t(filtered)))))
colv = as.dendrogram(hclust(as.dist(1-cor(filtered))))

# Generate a heatmap
heatmap(filtered, Rowv=rowv, Colv=colv, cexCol=0.7)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://suvar.netlify.com/post/bioinformatics/differential_expression_analysis/diferential_expression_analysis_files/figure-html/unnamed-chunk-1-11.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gplots)

# Enhanced heatmap
heatmap.2(filtered, Rowv=rowv, Colv=colv, cexCol=0.7,
          col = rev(redblue(256)), scale = &amp;quot;row&amp;quot;,
          trace=&amp;quot;none&amp;quot;, density.info=&amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://suvar.netlify.com/post/bioinformatics/differential_expression_analysis/diferential_expression_analysis_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Save the heatmap to a PDF file
pdf (&amp;quot;GSE5583_DE_Heatmap.pdf&amp;quot;)
heatmap.2(filtered, Rowv=rowv, Colv=colv, cexCol=0.7,
          col = rev(redblue(256)), scale = &amp;quot;row&amp;quot;)
dev.off()

# Save the DE genes to a text file
write.table (filtered, &amp;quot;GSE5583_DE.txt&amp;quot;, sep = &amp;quot;\t&amp;quot;,
             quote = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n = nrow(filtered)

cor.table = NULL
x = NULL
y = NULL
cor.val = NULL
cor.sig = NULL

for (i in 1 : (n-1)) {
  x_name = rownames(filtered)[i]
  x_exps = filtered[i, ]    
  
  for (j in (i+1) : n) {
    y_name = rownames(filtered)[j]
    y_exps = filtered[j, ]
    
    output = cor.test(x_exps,y_exps)
    
    x = c(x, x_name)
    y = c(y, y_name)
    cor.val = c(cor.val, output$estimate)
    cor.sig = c(cor.sig, output$p.value)
  }
}

cor.table = data.frame (x, y, cor.val, cor.sig)

dim(cor.table)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 861   4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(cor.table)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           x           y    cor.val      cor.sig
## 1 100716_at   100914_at  0.9732295 0.0010653980
## 2 100716_at   101368_at  0.9897688 0.0001564799
## 3 100716_at   101550_at -0.9060431 0.0128271221
## 4 100716_at 101635_f_at -0.9433403 0.0047245418
## 5 100716_at 101883_s_at  0.9508680 0.0035616301
## 6 100716_at   102712_at  0.9676037 0.0015572795&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sig_cutoff = 0.001

cor.filtered = subset (cor.table, cor.sig &amp;lt; sig_cutoff)

dim(cor.filtered)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 314   4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(cor.filtered)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            x         y    cor.val      cor.sig
## 2  100716_at 101368_at  0.9897688 1.564799e-04
## 8  100716_at 103088_at -0.9761495 8.464861e-04
## 10 100716_at 103299_at -0.9991089 1.190632e-06
## 14 100716_at 104700_at -0.9792543 6.411095e-04
## 15 100716_at 160172_at  0.9833552 4.132702e-04
## 16 100716_at 160943_at  0.9814703 5.118449e-04&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sources&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sources&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/ahmedmoustafa&#34;&gt;Ahmed Moustafa githab&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
