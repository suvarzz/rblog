10833+399+118+399+10833
10833+399+118
10833+399+118-11232
sapply(1:5,sqrt)
type(sapply(1:5,sqrt))
is.list(sapply(1:5,sqrt))
is.vector(sapply(1:5,sqrt))
library(dplyr)
library(Seurat)
library(seurat)
biocLite("Seurat")
source("/http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("Seurat")
library(dplyr)
library(seurat)
library(Seurat)
library(cowplot)
# Load the PBMC dataset
setwd = "/home/suvar/ github/seurat_tutoral/"
pbmc.data <- Read10X(data.dir = "/hg19/")
pbmc.data <- Read10X(data.dir = "~/hg19/")
pbmc.data <- Read10X(data.dir = "hg19/")
wd
getwd
getwd()
# Load the PBMC dataset
setwd = "/home/suvar/ github/seurat_tutoral/"
getwd()
# Load the PBMC dataset
setwd = "/home/suvar/github/seurat_tutoral/"
getwd()
pbmc.data <- Read10X(data.dir = "/github/seurat_tutorial/hg19/")
library(dplyr)
library(Seurat)
library(cowplot)
# Load the PBMC dataset
setwd = "/home/suvar/github/seurat_tutoral/"
pbmc.data <- Read10X(data.dir = "/github/seurat_tutorial/hg19/")
pbmc.data <- Read10X(data.dir = "./github/seurat_tutorial/hg19/")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
# Lets examine a few genes in the first thirty cells
pbmc.data[c("CD3D", "TCL1A", "MS4A1"), 1:30]
pbmc.data
dense.size <- object.size(as.matrix(pbmc.data))
dense.size
# Memory of the object
dense.size <- object.size(as.matrix(pbmc.data))
dense.size
# sparse-matrix is memory efficient
dense.size <- object.size(as.matrix(pbmc.data))
dense.size
# sparse-matrix is memory efficient
sparse.size <- object.size(pbmc.data)
sparse.size
dense.size/sparse.size
# Percent of mitochondrial genes
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Show QC metrics for the first 5 cells
head(pbmc@meta.data, 5)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "./github/seurat_tutorial/hg19/")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
# Lets examine a few genes in the first thirty cells
pbmc.data[c("CD3D", "TCL1A", "MS4A1"), 1:30]
# Memory of the object -> 9264728 bytes
dense.size <- object.size(as.matrix(pbmc.data))
dense.size
# sparse-matrix is memory efficient -> 29578392 bytes
sparse.size <- object.size(pbmc.data)
sparse.size
dense.size/sparse.size # 24 bytes
# Show QC metrics for the first 5 cells
head(pbmc@meta.data, 5)
# Percent of mitochondrial genes
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Show QC metrics for the first 5 cells
head(pbmc@meta.data, 5)
# We filter cells that have unique feature counts over 2,500 or less than 200
# We filter cells that have >5% mitochondrial counts
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(plot1, plot2))
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
# “LogNormalize” that normalizes the feature expression measurements for each cell by the total expression, multiplies this by a scale factor (10,000 by default), and log-transforms the result.
# Normalized values are stored in  pbmc[["RNA"]]@data.
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
CombinePlots(plots = list(plot1, plot2))
rnorm(n=3, mean=0.852, sd=0.07, fixed=TRUE)
rnorm(n=3, mean=0.852, sd=0.07)
?rnorm
rnorm_fixed(n=3, mean=0.916, sd=0.0425)
rnorm2 <- function(n,mean,sd) { mean+sd*scale(rnorm(n)) }
rnorm2(3, 0.916, 9.0425)
rnorm2 <- function(n,mean,sd) { mean+sd*scale(rnorm(n)) }
x <- rnorm2(3, 0.916, 0.0425)
x
rnorm2(3, 0.316, 0.0125)
rnorm2(3, 0.85071, x=(0.921-0.77889))
x=0.921-0.77889
rnorm2(3, 0.85071, x)
x=0.63840-0.58518
rnorm2(3, 0.60959, x)
x=1.644-1.494
rnorm2(3, 1.56593, x)
x=0.63772-0.40675
rnorm2(3, 0.52101, x)
x=1.27576-1.0838
rnorm2(3, 1.17978, x)
x=0.69019-0.54725
rnorm2(3, 0.61699, x)
x=2.74247-2.36747
rnorm2(3, 2.55399, x)
x=0.74638-0.58232
rnorm2(3, 0.66239, x)
x=1.84459-1.45858
rnorm2(3, 1.65193, x)
x=1.07602-0.87715
rnorm2(3, 0.9759, x)
x=1.55158-1.25959
rnorm2(3, 1.40461, x)
x=055662-0.42439
x=0.55662-0.42439
rnorm2(3, 0.48999, x)
x=1.16821-0.89526
rnorm2(3, 1.031, x)
0.78686-0.62719
rnorm2(3, 0.70532, x)
x=0.20123-0.18397
rnorm2(3, 0.19018, x)
x
x=0.11647-0.11163
rnorm2(3, 0.11267, x)
x=0.18200-0.16638
rnorm2(3, 17248, x)
rnorm2(3, 0.17248, x)
x=0.14935-0.13985
rnorm2(3, 0.14486, x)
x=0.96273-0.90365
rnorm2(3, 0.93295, x)
x=0.25668-0.25082
rnorm2(3, 0.25179, x)
x=0.85531-0.83407
rnorm2(3, 0.84628, x)
x=0.33356-0.31560
rnorm2(3, 0.32251, x)
x=0.98043-0.97066
rnorm2(3, 0.97433, x)
x=0.24167-0.21025
rnorm2(3, 22406, x)
rnorm2(3, 0.22406, x)
x=0.85871-0.8421
rnorm2(3, 0.85138, x)
x=0.31450-0.31052
rnorm2(3, 0.31259, x)
x=1.00109-0.83361
rnorm2(3, 0.91589, x)
x=0.34076-0.29462
rnorm2(3, 0.31501, x)
x=0.34076-0.29462
x=0.78648-0.62632
rnorm2(3, 0.70585, x)
x <- c(102, 91, 99, 100, 103, 98, 99, 101, 106, 88, 103, 97, 103, 101,
101, 91, 104, 105, 105, 100, 101, 91, 99, 98, 107, 102, 100, 97,
98, 104, 100, 98, 102, 99, 95, 103, 104, 97, 99, 102, 98, 107,
101, 93, 98, 101, 93, 91, 107, 102, 96, 93, 100, 105, 103, 107,
99, 102, 106, 102, 94, 104, 103, 102)
blogdown::new_site("~/github/rblog/")
blogdown::hugo_build()
setwd("~/github/rblog/")
blogdown::hugo_build()
blogdown::hugo_build()
setwd("~/github/rblog")
blogdown::new_site(theme = "Vimux/Mainroad")
blogdown::hugo_build()
blogdown::hugo_build()
blogdown::hugo_build()
blogdown::hugo_build()
blogdown::hugo_build()
